Files in this directory:
------------------------

client.*		- client certificate signed by rootCA
server.*		- server certificate signed by rootCA
rootCA.*		- self-signed CA certificate
stunnel.conf	- example configuration for stunnel
stunnel_netopeer.patch	- patch for stunnel (v5.03)
				making it export cert hashes and
				subjectAltName values, enabling new
				verify = 5 mode and slightly changing
				version information output


Patching stunnel:
~~~~~~~~~~~~~~~~

wget http://www.usenix.org.uk/mirrors/stunnel/archive/5.x/stunnel-5.03.tar.gz
tar -xzf stunnel-5.03.tar.gz
cd stunnel-5.03/src
patch -p0 -i ../../stunnel_netopeer.patch
cd ..
./configure
make
sudo make install


Generating certificates
~~~~~~~~~~~~~~~~~~~~~~~

Note: All certificates in this directory are only examples!

Create self-signed CA certificate:
openssl genrsa -out rootCA.key 2048
openssl req -x509 -new -nodes -key rootCA.key -days 1024 -out rootCA.pem

Create a peer certificate signed by own CA:
openssl genrsa -out peer.key 2048
openssl req -new -key peer.key -out peer.csr
openssl x509 -req -in peer.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out peer.crt -days 500


State after installation
~~~~~~~~~~~~~~~~~~~~~~~~

Important: All the software (netopeer-server(8), cfgsystem plugin,
	netopeer-cli(1), and libnetconf must be compiled with TLS support
	(configure switch --enable-tls) for this to be true.

During installation is the stunnel configuration file
"server/config/stunnel_config(.in)" copied into the netopeer-server(8)
configuration directory where will stunnel find it. It mainly includes
the default path to the server certificate and to the trusted CA chain
directory. To these paths are "server.pem" and "rootCA.pem" copied and
later used by stunnel for verification.

However, to successfully connect to netopeer-server(8) using TLS,
another 2 steps are required. Firstly, the TLS client must use
the provided "client.pem" certificate in order for verification to
pass. Otherwise, the client certificate CA signature chain must be
made available for stunnel or provide the client certificate itself.
netopeer-configurator(1) can be effectively used for this purpose.

Secondly, server, after successful TLS verification, must continue to
transform the presented client certificate to a NETCONF username to
be able to set privileges and permissions for the session. This
process is called cert-to-name and its configuration is part of
the module ietf-system-tls-auth, which augments the main model
ietf-system. This module is implemented as a netopeer plugin
cfgsystem. If installed, its configuration will include an entry
that resolves "client.pem" certificate into the username "tls_default"
by default.

To summarize, after compiling netopeer-server(8), cfgsystem, and
netopeer-cli(1) with "--enable-tls" option and installing it, you
are required to do very little to be able to successfully connect
using the TLS transport. That includes starting netopeer-server(8) at
least once after installation (for it to create its config file) and
if using netopeer-cli(1), just add "client.pem" and "rootCA.pem" into
it by "cert replaceown" and "cert add" commands. To learn more general
information about configuring TLS in netopeer-server(8), please refer
to the Wiki section found on https://netopeer.googlecode.com/.
